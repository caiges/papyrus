<html xmlns:moxie="urn:moxie"><head><META http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Class: TinyMCE_Engine</title><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link href="api_docs.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="search.js"></script></head><body><h1 class="title">TinyMCE</h1><div id="navigation"><a href="index.htm" class="indexlink">TinyMCE</a><div id="classlist"><h4>Classes</h4><ul><li><a href="class_TinyMCE_Cleanup.htm">TinyMCE_Cleanup</a></li><li><a href="class_TinyMCE_Control.htm">TinyMCE_Control</a></li><li><a href="class_TinyMCE_Engine.htm">TinyMCE_Engine</a></li><li><a href="class_TinyMCE_Layer.htm">TinyMCE_Layer</a></li><li><a href="class_TinyMCE_Menu.htm">TinyMCE_Menu</a></li><li><a href="class_TinyMCE_Popup.htm">TinyMCE_Popup</a></li><li><a href="class_TinyMCE_Selection.htm">TinyMCE_Selection</a></li><li><a href="class_TinyMCE_UndoRedo.htm">TinyMCE_UndoRedo</a></li></ul></div><div class="search"><form action="javascript:void(0);" onsubmit="return Search.exec(this.query.value,'searchresult','maincontent');"><label id="querylabel" for="query">Search:</label><input type="text" id="query" name="query" value=""></form></div></div><div id="searchresult"></div><div id="maincontent"><div id="classview"><div class="inheritagelist">Object<br><div class="baseclass"><strong>TinyMCE_Engine</strong><br></div></div><h3>Class TinyMCE_Engine</h3><div class="section"><div class="longsummary"></div></div><div class="section"><table class="constructorsummary"><caption>Constructor Summary</caption><tr><td><a href="#TinyMCE_Engine">TinyMCE_Engine</a>()
		<div class="shortsummary">Core engine class for TinyMCE, a instance of this class is available as a global called tinyMCE.</div></td></tr></table></div><div class="section"><table class="methodsummary"><caption>Method	Summary</caption><tr><td class="datatype">HTMLElement</td><td><a href="#_getElementById">_getElementById</a>(&lt;string&gt;	id, &lt;DOMDocument&gt;	d)
		<div class="shortsummary">Returns a element by id, this will also search the form names to match the id.</div></td></tr><tr><td class="datatype">void</td><td><a href="#_menuButtonEvent">_menuButtonEvent</a>(&lt;string&gt;	e, &lt;HTMLElement&gt;	o)
		<div class="shortsummary">Switched classes on menu elements in MSIE.</div></td></tr><tr><td class="datatype">void</td><td><a href="#_removeInternal">_removeInternal</a>(&lt;DOMNode&gt;	n)
		<div class="shortsummary">Removes any internal content inserted by regexps.</div></td></tr><tr><td class="datatype">void</td><td><a href="#_resetIframeHeight">_resetIframeHeight</a>()
		<div class="shortsummary">Resets the iframe width and height to it's old values before a drag/drop operation occured.</div></td></tr><tr><td class="datatype">void</td><td><a href="#accessibleEventHandler">accessibleEventHandler</a>(&lt;DOMEvent&gt;	e)
		<div class="shortsummary">Accessibility handler that gets executed when the user hits a key in a select element.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addButtonMap">addButtonMap</a>(&lt;string&gt;	m)
		<div class="shortsummary">Adds a list of buttons available in the tiled button image used by the button_tile_map option.</div></td></tr><tr><td class="datatype">string</td><td><a href="#addCSSClass">addCSSClass</a>(&lt;HTMLElement&gt;	e)
		<div class="shortsummary">Adds a CSS class to the specified element.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addEvent">addEvent</a>(&lt;HTMLElement&gt;	o, &lt;string&gt;	n, &lt;function&gt;	h)
		<div class="shortsummary">Adds a event handler function to the specified object.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addEventHandlers">addEventHandlers</a>(&lt;inst&gt;	inst)
		<div class="shortsummary">Adds the handleEvent function to the specified editor instance.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addMCEControl">addMCEControl</a>(&lt;HTMLElement&gt;	replace_element, &lt;string&gt;	form_element_name, &lt;DOMDocument&gt;	target_document)
		<div class="shortsummary">Adds a TinyMCE editor control instance to a specific form element.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addMenu">addMenu</a>(&lt;string&gt;	n, &lt;<a href="class_TinyMCE_Menu.htm">TinyMCE_Menu</a>&gt;	m)
		<div class="shortsummary">Adds a floating menu instance to TinyMCE.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addPlugin">addPlugin</a>(&lt;string&gt;	Plugin, &lt;TinyMCE_Plugin&gt;	p)
		<div class="shortsummary">Adds the specified plugin to the list of loaded plugins, this will also setup the baseURL property of the plugin.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addSelectAccessibility">addSelectAccessibility</a>(&lt;DOMEvent&gt;	e, &lt;HTMLElement&gt;	s, &lt;DOMWindow&gt;	w)
		<div class="shortsummary">Adds accessibility keydown handler to the specified select element.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addTheme">addTheme</a>(&lt;string&gt;	n, &lt;TinyMCE_Theme&gt;	t)
		<div class="shortsummary">Adds the specified theme in to the list of loaded themes.</div></td></tr><tr><td class="datatype">void</td><td><a href="#addToLang">addToLang</a>(&lt;string&gt;	prefix, &lt;Array&gt;	ar)
		<div class="shortsummary">Adds language items to the global language array.</div></td></tr><tr><td class="datatype">string</td><td><a href="#applyTemplate">applyTemplate</a>(&lt;string&gt;	h, &lt;Array&gt;	as)
		<div class="shortsummary">Replaces language, args and settings variables in a HTML string.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#callFunc">callFunc</a>(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	ins, &lt;string&gt;	p, &lt;string&gt;	n, &lt;int&gt;	m, &lt;Array&gt;	a)
		<div class="shortsummary">Executes callback chain.</div></td></tr><tr><td class="datatype">bool</td><td><a href="#cancelEvent">cancelEvent</a>(&lt;DOMEvent&gt;	e)
		<div class="shortsummary">Cancels the specified event, this will disable the event from be passed to other listeners in event chain.</div></td></tr><tr><td class="datatype">void</td><td><a href="#cleanupAnchors">cleanupAnchors</a>(&lt;DOMDocument&gt;	doc)
		<div class="shortsummary">Moves the contents of a anchor outside and after the anchor.</div></td></tr><tr><td class="datatype">string</td><td><a href="#cleanupEventStr">cleanupEventStr</a>(&lt;string&gt;	s)
		<div class="shortsummary">Removes MSIE 5.</div></td></tr><tr><td class="datatype">string</td><td><a href="#cleanupHTMLCode">cleanupHTMLCode</a>(&lt;string&gt;	s)
		<div class="shortsummary">Makes some preprocessing cleanup routines on the specified HTML string.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#clearArray">clearArray</a>()
		<div class="shortsummary">Returns a cleared array, since some external libraries tend to extend the Array core object arrays needs to be cleaned from these extended functions.</div></td></tr><tr><td class="datatype">void</td><td><a href="#closeWindow">closeWindow</a>(&lt;DOMWindow&gt;	win)
		<div class="shortsummary">Closes the specified window.</div></td></tr><tr><td class="datatype">void</td><td><a href="#compressStyle">compressStyle</a>(&lt;Array&gt;	ar, &lt;string&gt;	pr, &lt;string&gt;	sf, &lt;string&gt;	res)
		<div class="shortsummary">Compresses larger styles into a smaller.</div></td></tr><tr><td class="datatype">void</td><td><a href="#confirmAdd">confirmAdd</a>(&lt;DOMEvent&gt;	e, &lt;Array&gt;	settings)
		<div class="shortsummary">Displays a confirm dialog when a user clicks/focus a textarea that is to be converted into a TinyMCE instance.</div></td></tr><tr><td class="datatype">string</td><td><a href="#convertAbsoluteURLToRelativeURL">convertAbsoluteURLToRelativeURL</a>(&lt;string&gt;	base_url, &lt;string&gt;	url_to_relative)
		<div class="shortsummary">Converts an absolute path to relative path.</div></td></tr><tr><td class="datatype">void</td><td><a href="#convertAllRelativeURLs">convertAllRelativeURLs</a>(&lt;HTMLElement&gt;	body)
		<div class="shortsummary">Converts all img and a element URLs to absolute URLs.</div></td></tr><tr><td class="datatype">void</td><td><a href="#convertFontsToSpans">convertFontsToSpans</a>(&lt;DOMDocument&gt;	doc)
		<div class="shortsummary">Convers fonts to spans in the specified document.</div></td></tr><tr><td class="datatype">string</td><td><a href="#convertHexToRGB">convertHexToRGB</a>(&lt;string&gt;	s)
		<div class="shortsummary">Returns a rgb(n,n,n) string from a hexadecimal value.</div></td></tr><tr><td class="datatype">string</td><td><a href="#convertRelativeToAbsoluteURL">convertRelativeToAbsoluteURL</a>(&lt;string&gt;	base_url, &lt;string&gt;	relative_url)
		<div class="shortsummary">Converts an relative path to absolute path.</div></td></tr><tr><td class="datatype">string</td><td><a href="#convertRGBToHex">convertRGBToHex</a>(&lt;string&gt;	s, &lt;boolean&gt;	k)
		<div class="shortsummary">Returns a hexadecimal version of the specified rgb(1,2,3) string.</div></td></tr><tr><td class="datatype">void</td><td><a href="#convertSpansToFonts">convertSpansToFonts</a>(&lt;DOMDocument&gt;	doc)
		<div class="shortsummary">Converts span elements to font elements in the specified document instance.</div></td></tr><tr><td class="datatype">string</td><td><a href="#convertURL">convertURL</a>(&lt;string&gt;	url, &lt;HTMLElement&gt;	node, &lt;boolean&gt;	on_save)
		<div class="shortsummary">Converts the specified URL based in TinyMCE configuration settings.</div></td></tr><tr><td class="datatype">void</td><td><a href="#createTag">createTag</a>(&lt;string&gt;	d, &lt;string&gt;	tn, &lt;Array&gt;	a, &lt;string&gt;	h)
		<div class="shortsummary">Creates a tag by name and attributes array.</div></td></tr><tr><td class="datatype">void</td><td><a href="#createTagHTML">createTagHTML</a>(&lt;string&gt;	tn, &lt;Array&gt;	a, &lt;string&gt;	h)
		<div class="shortsummary">Creates a HTML tag by name and attributes array.</div></td></tr><tr><td class="datatype">void</td><td><a href="#debug">debug</a>()
		<div class="shortsummary">Debugs the specified message to devkit if it's loaded.</div></td></tr><tr><td class="datatype"></td><td><a href="#dispatchCallback">dispatchCallback</a>(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	i, &lt;string&gt;	p, &lt;string&gt;	n)
		<div class="shortsummary">Dispatches the specified callback on all options, plugins and themes.</div></td></tr><tr><td class="datatype">string</td><td><a href="#entityDecode">entityDecode</a>(&lt;string&gt;	s)
		<div class="shortsummary">HTML entity decode a string, replaces &lt; with <.</div></td></tr><tr><td class="datatype">object</td><td><a href="#evalFunc">evalFunc</a>(&lt;string&gt;	f, &lt;int&gt;	idx, &lt;Array&gt;	a, &lt;Object&gt;	o)
		<div class="shortsummary">Evaluates the specified function and uses the array of arguments.</div></td></tr><tr><td class="datatype">void</td><td><a href="#execCommand">execCommand</a>(&lt;string&gt;	command, &lt;boolean&gt;	user_interface, &lt;object&gt;	value)
		<div class="shortsummary">Executes a command on the selected or last selected TinyMCE editor control instance.</div></td></tr><tr><td class="datatype"></td><td><a href="#execCommandCallback">execCommandCallback</a>(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	i, &lt;string&gt;	p, &lt;string&gt;	n)
		<div class="shortsummary">Executes the specified execcommand callback on all options, plugins and themes.</div></td></tr><tr><td class="datatype">void</td><td><a href="#execInstanceCommand">execInstanceCommand</a>(&lt;string&gt;	editor_id, &lt;string&gt;	command, &lt;boolean&gt;	user_interface, &lt;object&gt;	value, &lt;boolean&gt;	focus)
		<div class="shortsummary">Executes a command on a specific editor instance by id.</div></td></tr><tr><td class="datatype"></td><td><a href="#executeCallback">executeCallback</a>(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	i, &lt;string&gt;	p, &lt;string&gt;	n)
		<div class="shortsummary">Executes the specified callback on all options, plugins and themes.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#explode">explode</a>(&lt;string&gt;	d, &lt;string&gt;	s)
		<div class="shortsummary">Splits a string by the specified delimiter and skips any empty items.</div></td></tr><tr><td class="datatype">Object</td><td><a href="#extend">extend</a>(&lt;Object&gt;	p, &lt;Object&gt;	np)
		<div class="shortsummary">Extends the specified prototype with new methods.</div></td></tr><tr><td class="datatype">string</td><td><a href="#fixGeckoBaseHREFBug">fixGeckoBaseHREFBug</a>(&lt;boolean&gt;	m, &lt;HTMLElement&gt;	e, &lt;string&gt;	h)
		<div class="shortsummary">Fixes a Gecko specific bug where href, src attribute values gets converted incorrectly when inserted into editor.</div></td></tr><tr><td class="datatype">TinyMCE_ElementPosition</td><td><a href="#getAbsPosition">getAbsPosition</a>(&lt;HTMLNode&gt;	n, &lt;HTMLNode&gt;	cn)
		<div class="shortsummary">Returns the absolute x, y position of a node.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getAttrib">getAttrib</a>(&lt;HTMLElement&gt;	elm, &lt;string&gt;	name, &lt;string&gt;	dv)
		<div class="shortsummary">Returns the attribute value of a element or the default value if it wasn't found.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getButtonHTML">getButtonHTML</a>(&lt;string&gt;	id, &lt;string&gt;	lang, &lt;string&gt;	img, &lt;string&gt;	cmd, &lt;string&gt;	ui, &lt;string&gt;	val)
		<div class="shortsummary">Returns the HTML code for a normal button control.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getContent">getContent</a>(&lt;string&gt;	editor_id)
		<div class="shortsummary">Returns the HTML contents of the specified editor instance id.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getControlHTML">getControlHTML</a>(&lt;string&gt;	c)
		<div class="shortsummary">Returns the HTML for the specified control this will loop through the theme and all plugins inorder to find the control.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#getCSSClasses">getCSSClasses</a>(&lt;string&gt;	editor_id, &lt;DOMDocument&gt;	doc)
		<div class="shortsummary">Returns a array of CSS classes that is available in a document.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getEditorId">getEditorId</a>(&lt;string&gt;	form_element)
		<div class="shortsummary">Returns the editor instance id of a specific form element.</div></td></tr><tr><td class="datatype">HTMLElement</td><td><a href="#getElementByAttributeValue">getElementByAttributeValue</a>(&lt;HTMLElement&gt;	n, &lt;string&gt;	e, &lt;string&gt;	a, &lt;string&gt;	v)
		<div class="shortsummary">Returns a element by a specific attribute and it's value.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#getElementsByAttributeValue">getElementsByAttributeValue</a>(&lt;HTMLElement&gt;	n, &lt;string&gt;	e, &lt;string&gt;	a, &lt;string&gt;	v)
		<div class="shortsummary">Returns a element array by a specific attribute and it's value.</div></td></tr><tr><td class="datatype"><a href="class_TinyMCE_Control.htm">TinyMCE_Control</a></td><td><a href="#getInstanceById">getInstanceById</a>(&lt;string&gt;	editor_id)
		<div class="shortsummary">Returns a TinyMCE editor instance by the specified editor id or null if it wasn't found.</div></td></tr><tr><td class="datatype">object</td><td><a href="#getLang">getLang</a>(&lt;string&gt;	name, &lt;string&gt;	default_value, &lt;boolean&gt;	parse_entities, &lt;Array&gt;	va)
		<div class="shortsummary">Returns a language variable value from the language packs.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getMenuButtonHTML">getMenuButtonHTML</a>(&lt;string&gt;	id, &lt;string&gt;	lang, &lt;string&gt;	img, &lt;string&gt;	mcmd, &lt;string&gt;	cmd, &lt;string&gt;	ui, &lt;string&gt;	val)
		<div class="shortsummary">Returns the HTML code for a normal button control.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#getNodeTree">getNodeTree</a>(&lt;HTMLNode&gt;	n, &lt;Array&gt;	na, &lt;int&gt;	t, &lt;string&gt;	nn)
		<div class="shortsummary">Returns a array of nodes selected retrived from the child nodes of the specified node.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getOuterHTML">getOuterHTML</a>(&lt;HTMLElement&gt;	e)
		<div class="shortsummary">Returns the outer HTML of a element, this uses the outerHTML property in MSIE and Opera and a workaround for Gecko.</div></td></tr><tr><td class="datatype">object</td><td><a href="#getParam">getParam</a>(&lt;string&gt;	name, &lt;string&gt;	default_value, &lt;boolean&gt;	strip_whitespace, &lt;string&gt;	split_chr)
		<div class="shortsummary">Returns a specific configuration setting or the default value if it wasn't found.</div></td></tr><tr><td class="datatype">HTMLElement</td><td><a href="#getParentBlockElement">getParentBlockElement</a>(&lt;HTMLNode&gt;	n, &lt;HTMLNode&gt;	r)
		<div class="shortsummary">Returns the first block element parent of the specified node.</div></td></tr><tr><td class="datatype">HTMLElement</td><td><a href="#getParentElement">getParentElement</a>(&lt;HTMLNode&gt;	node, &lt;string&gt;	na, &lt;function&gt;	f, &lt;HTMLNode&gt;	r)
		<div class="shortsummary">Returns the parent element of the specified node based on the search criteria.</div></td></tr><tr><td class="datatype">DOMNode</td><td><a href="#getParentNode">getParentNode</a>(&lt;DOMNode&gt;	n, &lt;function&gt;	f, &lt;HTMLNode&gt;	r)
		<div class="shortsummary">Returns a node by the specified selector function.</div></td></tr><tr><td class="datatype">Object</td><td><a href="#getViewPort">getViewPort</a>(&lt;Window&gt;	w)
		<div class="shortsummary">Returns the viewport of the specificed window instance.</div></td></tr><tr><td class="datatype"></td><td><a href="#getWindowArg">getWindowArg</a>(&lt;string&gt;	n)
		<div class="shortsummary">Returns the window argument to be passed to TinyMCE popup.</div></td></tr><tr><td class="datatype">string</td><td><a href="#getVisualAidClass">getVisualAidClass</a>(&lt;string&gt;	class_name, &lt;boolean&gt;	state)
		<div class="shortsummary">Returns the visual aid class string, this will add/remove the visual aid class.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#handleEvent">handleEvent</a>(&lt;DOMEvent&gt;	e)
		<div class="shortsummary">Event handler function that gets executed each time a event occurs in a TinyMCE editor control instance.</div></td></tr><tr><td class="datatype">void</td><td><a href="#handleVisualAid">handleVisualAid</a>(&lt;HTMLElement&gt;	el, &lt;boolean&gt;	deep, &lt;boolean&gt;	state, &lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	inst)
		<div class="shortsummary">Adds visual aid classes to all elements that need them recursive in the DOM tree.</div></td></tr><tr><td class="datatype">bool</td><td><a href="#hasCSSClass">hasCSSClass</a>(&lt;HTMLElement&gt;	n)
		<div class="shortsummary">Returns true if the specified element has the specified class.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#hasMenu">hasMenu</a>(&lt;string&gt;	n)
		<div class="shortsummary">Checks if the specified menu by name is added to TinyMCE.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#hasPlugin">hasPlugin</a>(&lt;string&gt;	n)
		<div class="shortsummary">Returns true/false if the specified plugin is loaded or not.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#hasTheme">hasTheme</a>(&lt;string&gt;	n)
		<div class="shortsummary">Returns true/false if the specified theme is loaded or not.</div></td></tr><tr><td class="datatype">void</td><td><a href="#importCSS">importCSS</a>(&lt;DOMDocument&gt;	doc, &lt;string&gt;	css)
		<div class="shortsummary">Imports a CSS file into a allready loaded document.</div></td></tr><tr><td class="datatype">void</td><td><a href="#importPluginLanguagePack">importPluginLanguagePack</a>(&lt;string&gt;	name)
		<div class="shortsummary">Loads a plugin specific language pack.</div></td></tr><tr><td class="datatype">void</td><td><a href="#importThemeLanguagePack">importThemeLanguagePack</a>(&lt;string&gt;	name)
		<div class="shortsummary">Loads a theme specific language pack.</div></td></tr><tr><td class="datatype">void</td><td><a href="#init">init</a>()
		<div class="shortsummary">Initializes TinyMCE with the specific configuration settings.</div></td></tr><tr><td class="datatype">void</td><td><a href="#insertAfter">insertAfter</a>(&lt;HTMLNode&gt;	n, &lt;HTMLNode&gt;	r)
		<div class="shortsummary">Inserts a node after the specific node.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#isBlockElement">isBlockElement</a>(&lt;HTMLNode&gt;	n)
		<div class="shortsummary">Returns true/false if the specified node is a block element or not.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#isInstance">isInstance</a>(&lt;object&gt;	o)
		<div class="shortsummary">Returns true/false if a specific object is a TinyMCE_Control instance or not.</div></td></tr><tr><td class="datatype">void</td><td><a href="#loadCSS">loadCSS</a>(&lt;string&gt;	url)
		<div class="shortsummary">Loads the specified CSS by writing the a link tag to the current page.</div></td></tr><tr><td class="datatype">void</td><td><a href="#loadNextScript">loadNextScript</a>()
		<div class="shortsummary">Loads the next script in chain.</div></td></tr><tr><td class="datatype">void</td><td><a href="#loadPlugin">loadPlugin</a>(&lt;string&gt;	n, &lt;string&gt;	u)
		<div class="shortsummary">Load plugin from external URL.</div></td></tr><tr><td class="datatype">void</td><td><a href="#loadScript">loadScript</a>(&lt;string&gt;	url)
		<div class="shortsummary">Loads the specified script by writing the a script tag to the current page.</div></td></tr><tr><td class="datatype">HTMLElement</td><td><a href="#nextNode">nextNode</a>(&lt;HTMLNode&gt;	e, &lt;string&gt;	n)
		<div class="shortsummary">Finds any element after the current one by name.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#onLoad">onLoad</a>()
		<div class="shortsummary">Gets executed when the page loads or get intitialized.</div></td></tr><tr><td class="datatype">void</td><td><a href="#onMouseMove">onMouseMove</a>()
		<div class="shortsummary">Mouse move handler function, this will be executed each time the mouse is moved within a editor instance.</div></td></tr><tr><td class="datatype">void</td><td><a href="#openWindow">openWindow</a>(&lt;Array&gt;	template, &lt;Array&gt;	args)
		<div class="shortsummary">Opens a popup window based in the specified input data.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#parseStyle">parseStyle</a>(&lt;string&gt;	str)
		<div class="shortsummary">Parses the specified HTML style data.</div></td></tr><tr><td class="datatype">TinyMCE_URL_Item</td><td><a href="#parseURL">parseURL</a>(&lt;string&gt;	url_str)
		<div class="shortsummary">Parses a URL in to its diffrent components.</div></td></tr><tr><td class="datatype">HTMLElement</td><td><a href="#prevNode">prevNode</a>(&lt;HTMLNode&gt;	e, &lt;string&gt;	n)
		<div class="shortsummary">Finds any previous element by name.</div></td></tr><tr><td class="datatype">boolean</td><td><a href="#queryInstanceCommandState">queryInstanceCommandState</a>(&lt;string&gt;	editor_id, &lt;string&gt;	command)
		<div class="shortsummary">Queries a command state for a specific command on a specific editor instance.</div></td></tr><tr><td class="datatype">object</td><td><a href="#queryInstanceCommandValue">queryInstanceCommandValue</a>(&lt;string&gt;	editor_id, &lt;string&gt;	command)
		<div class="shortsummary">Queries a command value for a specific command on a specific editor instance.</div></td></tr><tr><td class="datatype">string</td><td><a href="#regexpReplace">regexpReplace</a>(&lt;string&gt;	in_str, &lt;string&gt;	reg_exp, &lt;string&gt;	replace_str, &lt;string&gt;	in_str)
		<div class="shortsummary">Regexp replaces the contents of a string.</div></td></tr><tr><td class="datatype">string</td><td><a href="#removeCSSClass">removeCSSClass</a>(&lt;HTMLElement&gt;	e)
		<div class="shortsummary">Removes the specified CSS class from the element.</div></td></tr><tr><td class="datatype">void</td><td><a href="#removeEvent">removeEvent</a>(&lt;HTMLElement&gt;	o, &lt;string&gt;	n, &lt;function&gt;	h)
		<div class="shortsummary">Removes a event handler function from the specified object.</div></td></tr><tr><td class="datatype">MCEControl</td><td><a href="#removeInstance">removeInstance</a>(&lt;MCEControl&gt;	ti)
		<div class="shortsummary">Removes the specified instance from TinyMCE Engine.</div></td></tr><tr><td class="datatype">void</td><td><a href="#removeMCEControl">removeMCEControl</a>(&lt;string&gt;	editor_id)
		<div class="shortsummary">Removes a TinyMCE editor control instance by id.</div></td></tr><tr><td class="datatype">void</td><td><a href="#removeTinyMCEFormElements">removeTinyMCEFormElements</a>(&lt;HTMLElement&gt;	form_obj)
		<div class="shortsummary">Removes/disables TinyMCE built in form elements such as select boxes for font sizes etc.</div></td></tr><tr><td class="datatype">void</td><td><a href="#renameElement">renameElement</a>(&lt;HTMLElement&gt;	e, &lt;string&gt;	n, &lt;DOMDocument&gt;	d)
		<div class="shortsummary">Renames the specified element to the specified name.</div></td></tr><tr><td class="datatype">string</td><td><a href="#replaceVar">replaceVar</a>(&lt;string&gt;	h, &lt;string&gt;	r, &lt;string&gt;	v)
		<div class="shortsummary">Replaces a specific variable in the string with a nother string.</div></td></tr><tr><td class="datatype">void</td><td><a href="#resetForm">resetForm</a>(&lt;int&gt;	form_index)
		<div class="shortsummary">Resets a forms TinyMCE instances based on form index.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#selectElements">selectElements</a>(&lt;DOMNode&gt;	n, &lt;string&gt;	na, &lt;function&gt;	f)
		<div class="shortsummary">Returns a array of elements when the specified function matches a node.</div></td></tr><tr><td class="datatype">Array</td><td><a href="#selectNodes">selectNodes</a>(&lt;DOMNode&gt;	n, &lt;function&gt;	f, &lt;Array&gt;	a)
		<div class="shortsummary">Returns a array of nodes when the specified function matches a node.</div></td></tr><tr><td class="datatype">string</td><td><a href="#serializeStyle">serializeStyle</a>(&lt;Array&gt;	ar)
		<div class="shortsummary">Serializes the specified style item name/value array into a HTML string.</div></td></tr><tr><td class="datatype">string</td><td><a href="#serializeURL">serializeURL</a>(&lt;TinyMCE_URL_Item&gt;	up)
		<div class="shortsummary">Serializes the specified URL object into a string.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setAttrib">setAttrib</a>(&lt;HTMLElement&gt;	el, &lt;string&gt;	name, &lt;string&gt;	va, &lt;boolean&gt;	fix)
		<div class="shortsummary">Sets the attribute value for a specific attribute.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setContent">setContent</a>(&lt;string&gt;	h)
		<div class="shortsummary">Sets the HTML contents of the selected editor instance.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setEventHandlers">setEventHandlers</a>(&lt;bool&gt;	s)
		<div class="shortsummary">Sets or removes event handles form the specified instance.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setInnerHTML">setInnerHTML</a>(&lt;HTMLElement&gt;	e, &lt;string&gt;	h)
		<div class="shortsummary">Sets the innerHTML property of a element, this function also fixes a MSIE bug where the first comment is removed.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setOuterHTML">setOuterHTML</a>(&lt;HTMLElement&gt;	e, &lt;string&gt;	h, &lt;DOMDocument&gt;	d)
		<div class="shortsummary">Sets the outer HTML of a element, this uses the outerHTML property in MSIE and Opera and a workaround for Gecko.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setPluginBaseURL">setPluginBaseURL</a>(&lt;string&gt;	n, &lt;string&gt;	u)
		<div class="shortsummary">Sets the baseURL of the specified plugin, this is useful if the plugin is loaded from a external location.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setStyleAttrib">setStyleAttrib</a>(&lt;HTMLElement&gt;	e, &lt;string&gt;	n, &lt;string&gt;	v)
		<div class="shortsummary">Sets a style attribute item value.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setupContent">setupContent</a>(&lt;string&gt;	editor_id)
		<div class="shortsummary">Setups the contents of TinyMCE editor instance and fills it with contents.</div></td></tr><tr><td class="datatype">void</td><td><a href="#setWindowArg">setWindowArg</a>(&lt;string&gt;	n, &lt;string&gt;	v)
		<div class="shortsummary">Sets the window argument to be passed to TinyMCE popup.</div></td></tr><tr><td class="datatype">string</td><td><a href="#storeAwayURLs">storeAwayURLs</a>(&lt;string&gt;	s)
		<div class="shortsummary">Stores away the src and href attribute values in separate mce_src and mce_href attributes.</div></td></tr><tr><td class="datatype">void</td><td><a href="#submitPatch">submitPatch</a>()
		<div class="shortsummary">Piggyback onsubmit event handler function, this will remove/hide the TinyMCE specific form elements call triggerSave to fill the textarea with the correct contents then call the old piggy backed event handler.</div></td></tr><tr><td class="datatype">void</td><td><a href="#switchClass">switchClass</a>(&lt;HTMLElement&gt;	ei, &lt;string&gt;	c)
		<div class="shortsummary">Switches the CSS class of the specified element.</div></td></tr><tr><td class="datatype">void</td><td><a href="#triggerNodeChange">triggerNodeChange</a>(&lt;boolean&gt;	focus, &lt;boolean&gt;	setup_content)
		<div class="shortsummary">Triggers a nodeChange event to every theme and plugin.</div></td></tr><tr><td class="datatype">void</td><td><a href="#triggerSave">triggerSave</a>(&lt;boolean&gt;	skip_cleanup, &lt;boolean&gt;	skip_callback)
		<div class="shortsummary">Moves the contents from a TinyMCE editor control instance to the hidden textarea that got replaced with TinyMCE.</div></td></tr><tr><td class="datatype">string</td><td><a href="#trim">trim</a>(&lt;string&gt;	s)
		<div class="shortsummary">Removes all prefix, suffix whitespace of a string.</div></td></tr><tr><td class="datatype">void</td><td><a href="#unloadHandler">unloadHandler</a>()
		<div class="shortsummary">Unload document event handler function.</div></td></tr><tr><td class="datatype">void</td><td><a href="#updateContent">updateContent</a>(&lt;string&gt;	form_element_name)
		<div class="shortsummary">Moves the contents from the hidden textarea to the editor that gets inserted.</div></td></tr><tr><td class="datatype">string</td><td><a href="#xmlEncode">xmlEncode</a>(&lt;string&gt;	s)
		<div class="shortsummary">Encodes the string to raw XML entities.</div></td></tr></table></div><div class="section constructor details"><h3><a name="constructor_detail">Constructor Detail</a></h3><div class="content"><h4><a name="TinyMCE_Engine">TinyMCE_Engine</a></h4><div class="layout">TinyMCE_Engine()
		</div><div class="detail"><div class="longsummary">Core engine class for TinyMCE, a instance of this class is available as a global called tinyMCE.</div></div></div></div><div class="section method details"><h3><a name="method_detail">Method Detail</a></h3><div class="content"><h4><a name="_getElementById">_getElementById</a></h4><div class="layout">HTMLElement _getElementById(&lt;string&gt;	id, &lt;DOMDocument&gt;	d)
		</div><div class="detail"><div class="longsummary">Returns a element by id, this will also search the form names to match the id.</div><div class="params"><h4>Parameters</h4><div class="param">id - Id of element.</div><div class="param">d - Optional document.</div></div><h4>Returns</h4><div class="longsummary return">HTML element that matches the id.</div></div><hr><h4><a name="_menuButtonEvent">_menuButtonEvent</a></h4><div class="layout">void _menuButtonEvent(&lt;string&gt;	e, &lt;HTMLElement&gt;	o)
		</div><div class="detail"><div class="longsummary">Switched classes on menu elements in MSIE.</div><div class="params"><h4>Parameters</h4><div class="param">e - Event name	out, over.</div><div class="param">o - HTML element to set class on.</div></div></div><hr><h4><a name="_removeInternal">_removeInternal</a></h4><div class="layout">void _removeInternal(&lt;DOMNode&gt;	n)
		</div><div class="detail"><div class="longsummary">Removes any internal content inserted by regexps.</div><div class="params"><h4>Parameters</h4><div class="param">n - Node to remove internal content from.</div></div></div><hr><h4><a name="_resetIframeHeight">_resetIframeHeight</a></h4><div class="layout">void _resetIframeHeight()
		</div><div class="detail"><div class="longsummary">Resets the iframe width and height to it's old values before a drag/drop operation occured. This function is used in a workaround for a MSIE bug where drag/drop fails in iframes with width/height in %.</div></div><hr><h4><a name="accessibleEventHandler">accessibleEventHandler</a></h4><div class="layout">void accessibleEventHandler(&lt;DOMEvent&gt;	e)
		</div><div class="detail"><div class="longsummary">Accessibility handler that gets executed when the user hits a key in a select element. This handler trams the enter/return or space key and then executes the onchange event handler.</div><div class="params"><h4>Parameters</h4><div class="param">e - DOM event object instance.</div></div></div><hr><h4><a name="addButtonMap">addButtonMap</a></h4><div class="layout">void addButtonMap(&lt;string&gt;	m)
		</div><div class="detail"><div class="longsummary">Adds a list of buttons available in the tiled button image used by the button_tile_map option.</div><div class="params"><h4>Parameters</h4><div class="param">m - Comma separated list of buttons that are available in tiled image.</div></div></div><hr><h4><a name="addCSSClass">addCSSClass</a></h4><div class="layout">string addCSSClass(&lt;HTMLElement&gt;	e)
		</div><div class="detail"><div class="longsummary">Adds a CSS class to the specified element. It will remove any previous item with the same name so adding a class that already exists will move it to the end.</div><div class="params"><h4>Parameters</h4><div class="param">e - HTML element to add CSS class to.</div></div><h4>Returns</h4><div class="longsummary return">Returns the new class attribute value.</div></div><hr><h4><a name="addEvent">addEvent</a></h4><div class="layout">void addEvent(&lt;HTMLElement&gt;	o, &lt;string&gt;	n, &lt;function&gt;	h)
		</div><div class="detail"><div class="longsummary">Adds a event handler function to the specified object.</div><div class="params"><h4>Parameters</h4><div class="param">o - Object to add event handler to.</div><div class="param">n - Event name to listen to for example "click".</div><div class="param">h - Function handler to execute when event occurs.</div></div></div><hr><h4><a name="addEventHandlers">addEventHandlers</a></h4><div class="layout">void addEventHandlers(&lt;inst&gt;	inst)
		</div><div class="detail"><div class="longsummary">Adds the handleEvent function to the specified editor instance.</div><div class="params"><h4>Parameters</h4><div class="param">inst - Editor control instance to add event handler to.</div></div></div><hr><h4><a name="addMCEControl">addMCEControl</a></h4><div class="layout">void addMCEControl(&lt;HTMLElement&gt;	replace_element, &lt;string&gt;	form_element_name, &lt;DOMDocument&gt;	target_document)
		</div><div class="detail"><div class="longsummary">Adds a TinyMCE editor control instance to a specific form element.</div><div class="params"><h4>Parameters</h4><div class="param">replace_element - HTML element object to replace.</div><div class="param">form_element_name - HTML form element name,</div><div class="param">target_document - Target document that holds the element.</div></div></div><hr><h4><a name="addMenu">addMenu</a></h4><div class="layout">void addMenu(&lt;string&gt;	n, &lt;<a href="class_TinyMCE_Menu.htm">TinyMCE_Menu</a>&gt;	m)
		</div><div class="detail"><div class="longsummary">Adds a floating menu instance to TinyMCE.</div><div class="params"><h4>Parameters</h4><div class="param">n - TinyMCE menu id.</div><div class="param">m - TinyMCE menu instance.</div></div></div><hr><h4><a name="addPlugin">addPlugin</a></h4><div class="layout">void addPlugin(&lt;string&gt;	Plugin, &lt;TinyMCE_Plugin&gt;	p)
		</div><div class="detail"><div class="longsummary">Adds the specified plugin to the list of loaded plugins, this will also setup the baseURL property of the plugin.</div><div class="params"><h4>Parameters</h4><div class="param">Plugin - name/id.</div><div class="param">p - Plugin instance to add.</div></div></div><hr><h4><a name="addSelectAccessibility">addSelectAccessibility</a></h4><div class="layout">void addSelectAccessibility(&lt;DOMEvent&gt;	e, &lt;HTMLElement&gt;	s, &lt;DOMWindow&gt;	w)
		</div><div class="detail"><div class="longsummary">Adds accessibility keydown handler to the specified select element.</div><div class="params"><h4>Parameters</h4><div class="param">e - Event that gets passed when the element is focused.</div><div class="param">s - Select element that the keydown handler gets added to.</div><div class="param">w - DOM window reference to add.</div></div></div><hr><h4><a name="addTheme">addTheme</a></h4><div class="layout">void addTheme(&lt;string&gt;	n, &lt;TinyMCE_Theme&gt;	t)
		</div><div class="detail"><div class="longsummary">Adds the specified theme in to the list of loaded themes.</div><div class="params"><h4>Parameters</h4><div class="param">n - Theme name/id to add the object reference to.</div><div class="param">t - Theme instance to add to the loaded list.</div></div></div><hr><h4><a name="addToLang">addToLang</a></h4><div class="layout">void addToLang(&lt;string&gt;	prefix, &lt;Array&gt;	ar)
		</div><div class="detail"><div class="longsummary">Adds language items to the global language array.</div><div class="params"><h4>Parameters</h4><div class="param">prefix - Prefix string to add infront of every array item before adding it.</div><div class="param">ar - Language item array to add to global language array.</div></div></div><hr><h4><a name="applyTemplate">applyTemplate</a></h4><div class="layout">string applyTemplate(&lt;string&gt;	h, &lt;Array&gt;	as)
		</div><div class="detail"><div class="longsummary">Replaces language, args and settings variables in a HTML string.</div><div class="params"><h4>Parameters</h4><div class="param">h - HTML string to replace language variables in.</div><div class="param">as - Optional arguments array to take variables from.</div></div><h4>Returns</h4><div class="longsummary return">HTML string with replaced varliables.</div></div><hr><h4><a name="callFunc">callFunc</a></h4><div class="layout">boolean callFunc(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	ins, &lt;string&gt;	p, &lt;string&gt;	n, &lt;int&gt;	m, &lt;Array&gt;	a)
		</div><div class="detail"><div class="longsummary">Executes callback chain. Callback order: Option, Plugins, Themes.</div><div class="params"><h4>Parameters</h4><div class="param">ins - TinyMCE editor control instance to execute callback on.</div><div class="param">p - TinyMCE callback parameter name.</div><div class="param">n - Function name to execute.</div><div class="param">m - Execution mode value, 0 = no chain, 1 = event chain, 2 = execcommand chain.</div><div class="param">a - Array with function arguments.</div></div><h4>Returns</h4><div class="longsummary return">true - if the callback was executed, false if it wasn't.</div></div><hr><h4><a name="cancelEvent">cancelEvent</a></h4><div class="layout">bool cancelEvent(&lt;DOMEvent&gt;	e)
		</div><div class="detail"><div class="longsummary">Cancels the specified event, this will disable the event from be passed to other listeners in event chain.</div><div class="params"><h4>Parameters</h4><div class="param">e - Event to cancel.</div></div><h4>Returns</h4><div class="longsummary return">Returns false.</div></div><hr><h4><a name="cleanupAnchors">cleanupAnchors</a></h4><div class="layout">void cleanupAnchors(&lt;DOMDocument&gt;	doc)
		</div><div class="detail"><div class="longsummary">Moves the contents of a anchor outside and after the anchor. Only if the anchor doesn't have a href.</div><div class="params"><h4>Parameters</h4><div class="param">doc - DOM document instance to fix anchors in.</div></div></div><hr><h4><a name="cleanupEventStr">cleanupEventStr</a></h4><div class="layout">string cleanupEventStr(&lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">Removes MSIE 5.5 specific event wrapper function form a event string. This will also remove the event blocker if it's added in front of the event.</div><div class="params"><h4>Parameters</h4><div class="param">s - String to replace event data in.</div></div><h4>Returns</h4><div class="longsummary return">Replaced string value.</div></div><hr><h4><a name="cleanupHTMLCode">cleanupHTMLCode</a></h4><div class="layout">string cleanupHTMLCode(&lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">Makes some preprocessing cleanup routines on the specified HTML string. This includes forcing some tags to be open so MSIE doesn't fail. Forcing other to close and padding paragraphs with non breaking spaces. This function is used when the editor gets initialized with content.</div><div class="params"><h4>Parameters</h4><div class="param">s - HTML string to cleanup.</div></div><h4>Returns</h4><div class="longsummary return">Cleaned HTML string.</div></div><hr><h4><a name="clearArray">clearArray</a></h4><div class="layout">Array clearArray()
		</div><div class="detail"><div class="longsummary">Returns a cleared array, since some external libraries tend to extend the Array core object arrays needs to be cleaned from these extended functions. So this function simply setting any named properties to null.</div><h4>Returns</h4><div class="longsummary return">Cleared name/value array.</div></div><hr><h4><a name="closeWindow">closeWindow</a></h4><div class="layout">void closeWindow(&lt;DOMWindow&gt;	win)
		</div><div class="detail"><div class="longsummary">Closes the specified window. This function is deprecated and should be replaced with tinyMCEPopup.close();.</div><div class="params"><h4>Parameters</h4><div class="param">win - Window reference to close.</div></div></div><hr><h4><a name="compressStyle">compressStyle</a></h4><div class="layout">void compressStyle(&lt;Array&gt;	ar, &lt;string&gt;	pr, &lt;string&gt;	sf, &lt;string&gt;	res)
		</div><div class="detail"><div class="longsummary">Compresses larger styles into a smaller. Since MSIE automaticly converts border: 1px solid red to border-left: 1px solid red, border-righ: 1px solid red and so forth.' This will bundle them together again if the information is the same in each item.</div><div class="params"><h4>Parameters</h4><div class="param">ar - Style name/value array with items.</div><div class="param">pr - Style item prefix to bundle for example border.</div><div class="param">sf - Style item suffix to bunlde for example -width or -width.</div><div class="param">res - Result name, for example border-width.</div></div></div><hr><h4><a name="confirmAdd">confirmAdd</a></h4><div class="layout">void confirmAdd(&lt;DOMEvent&gt;	e, &lt;Array&gt;	settings)
		</div><div class="detail"><div class="longsummary">Displays a confirm dialog when a user clicks/focus a textarea that is to be converted into a TinyMCE instance.</div><div class="params"><h4>Parameters</h4><div class="param">e - DOM event instance.</div><div class="param">settings - Name/Value array of initialization settings.</div></div></div><hr><h4><a name="convertAbsoluteURLToRelativeURL">convertAbsoluteURLToRelativeURL</a></h4><div class="layout">string convertAbsoluteURLToRelativeURL(&lt;string&gt;	base_url, &lt;string&gt;	url_to_relative)
		</div><div class="detail"><div class="longsummary">Converts an absolute path to relative path.</div><div class="params"><h4>Parameters</h4><div class="param">base_url - URL to make as a base path, URLs will be converted relative from this point.</div><div class="param">url_to_relative - URL to convert into a relative URL.</div></div><h4>Returns</h4><div class="longsummary return">Relative URL based in input.</div></div><hr><h4><a name="convertAllRelativeURLs">convertAllRelativeURLs</a></h4><div class="layout">void convertAllRelativeURLs(&lt;HTMLElement&gt;	body)
		</div><div class="detail"><div class="longsummary">Converts all img and a element URLs to absolute URLs. This will use the mce_src or mce_href attribute values if they are provided. This function is used when the editor is initialized.</div><div class="params"><h4>Parameters</h4><div class="param">body - HTML element to convert all URLs in.</div></div></div><hr><h4><a name="convertFontsToSpans">convertFontsToSpans</a></h4><div class="layout">void convertFontsToSpans(&lt;DOMDocument&gt;	doc)
		</div><div class="detail"><div class="longsummary">Convers fonts to spans in the specified document. Todo: Move this function into a XHTML plugin or simmilar.</div><div class="params"><h4>Parameters</h4><div class="param">doc - Document instance to convert fonts in.</div></div></div><hr><h4><a name="convertHexToRGB">convertHexToRGB</a></h4><div class="layout">string convertHexToRGB(&lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">Returns a rgb(n,n,n) string from a hexadecimal value.</div><div class="params"><h4>Parameters</h4><div class="param">s - Hexadecimal string to parse.</div></div><h4>Returns</h4><div class="longsummary return">rgb(n,n,n) string from a hexadecimal value.</div></div><hr><h4><a name="convertRelativeToAbsoluteURL">convertRelativeToAbsoluteURL</a></h4><div class="layout">string convertRelativeToAbsoluteURL(&lt;string&gt;	base_url, &lt;string&gt;	relative_url)
		</div><div class="detail"><div class="longsummary">Converts an relative path to absolute path.</div><div class="params"><h4>Parameters</h4><div class="param">base_url - URL to make as a base path, URLs will be converted absolute from this point.</div><div class="param">relative_url - URL to convert into a absolute URL.</div></div><h4>Returns</h4><div class="longsummary return">Absolute URL based in input.</div></div><hr><h4><a name="convertRGBToHex">convertRGBToHex</a></h4><div class="layout">string convertRGBToHex(&lt;string&gt;	s, &lt;boolean&gt;	k)
		</div><div class="detail"><div class="longsummary">Returns a hexadecimal version of the specified rgb(1,2,3) string.</div><div class="params"><h4>Parameters</h4><div class="param">s - RGB string to parse, if this doesn't isn't a rgb(n,n,n) it will passthrough the string.</div><div class="param">k - Keep before/after contents. If enabled contents before after the rgb(n,n,n) will be intact.</div></div><h4>Returns</h4><div class="longsummary return">Hexadecimal version of the specified rgb(1,2,3) string.</div></div><hr><h4><a name="convertSpansToFonts">convertSpansToFonts</a></h4><div class="layout">void convertSpansToFonts(&lt;DOMDocument&gt;	doc)
		</div><div class="detail"><div class="longsummary">Converts span elements to font elements in the specified document instance. Todo: Move this function into a XHTML plugin or simmilar.</div><div class="params"><h4>Parameters</h4><div class="param">doc - Document instance to convert spans in.</div></div></div><hr><h4><a name="convertURL">convertURL</a></h4><div class="layout">string convertURL(&lt;string&gt;	url, &lt;HTMLElement&gt;	node, &lt;boolean&gt;	on_save)
		</div><div class="detail"><div class="longsummary">Converts the specified URL based in TinyMCE configuration settings.</div><div class="params"><h4>Parameters</h4><div class="param">url - URL to convert based on config.</div><div class="param">node - HTML element that holds the URL.</div><div class="param">on_save - Is this convertion the final output URL.</div></div><h4>Returns</h4><div class="longsummary return">Converted URL string.</div></div><hr><h4><a name="createTag">createTag</a></h4><div class="layout">void createTag(&lt;string&gt;	d, &lt;string&gt;	tn, &lt;Array&gt;	a, &lt;string&gt;	h)
		</div><div class="detail"><div class="longsummary">Creates a tag by name and attributes array. This will create a DOM node out of the specified data.</div><div class="params"><h4>Parameters</h4><div class="param">d - Document to create DOM node in.</div><div class="param">tn - Tag name to create.</div><div class="param">a - Optional name/Value array of attributes.</div><div class="param">h - Optional inner HTML of new tag, raw HTML code.</div></div></div><hr><h4><a name="createTagHTML">createTagHTML</a></h4><div class="layout">void createTagHTML(&lt;string&gt;	tn, &lt;Array&gt;	a, &lt;string&gt;	h)
		</div><div class="detail"><div class="longsummary">Creates a HTML tag by name and attributes array. This will XML encode all attribute values.</div><div class="params"><h4>Parameters</h4><div class="param">tn - Tag name to create.</div><div class="param">a - Optional name/Value array of attributes.</div><div class="param">h - Optional inner HTML of new tag, raw HTML code.</div></div></div><hr><h4><a name="debug">debug</a></h4><div class="layout">void debug()
		</div><div class="detail"><div class="longsummary">Debugs the specified message to devkit if it's loaded.</div></div><hr><h4><a name="dispatchCallback">dispatchCallback</a></h4><div class="layout"> dispatchCallback(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	i, &lt;string&gt;	p, &lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Dispatches the specified callback on all options, plugins and themes. This will not chain them, so all functions callbacks will be executed regardless if the return true/false.</div><div class="params"><h4>Parameters</h4><div class="param">i - TinyMCE editor control instance to execute callback on.</div><div class="param">p - TinyMCE callback parameter to execute.</div><div class="param">n - Function name to execute.</div></div><h4>Returns</h4><div class="longsummary return">true/false if they where dispatched.</div></div><hr><h4><a name="entityDecode">entityDecode</a></h4><div class="layout">string entityDecode(&lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">HTML entity decode a string, replaces &lt; with <.</div><div class="params"><h4>Parameters</h4><div class="param">s - Entity string to decode into normal string.</div></div><h4>Returns</h4><div class="longsummary return">Entity decoded string.</div></div><hr><h4><a name="evalFunc">evalFunc</a></h4><div class="layout">object evalFunc(&lt;string&gt;	f, &lt;int&gt;	idx, &lt;Array&gt;	a, &lt;Object&gt;	o)
		</div><div class="detail"><div class="longsummary">Evaluates the specified function and uses the array of arguments.</div><div class="params"><h4>Parameters</h4><div class="param">f - Function reference to execute.</div><div class="param">idx - Index in array to start grabbing arguments from.</div><div class="param">a - Array of function arguments.</div><div class="param">o - Optional object reference to call function on.</div></div><h4>Returns</h4><div class="longsummary return">Value returned from the evaluated function.</div></div><hr><h4><a name="execCommand">execCommand</a></h4><div class="layout">void execCommand(&lt;string&gt;	command, &lt;boolean&gt;	user_interface, &lt;object&gt;	value)
		</div><div class="detail"><div class="longsummary">Executes a command on the selected or last selected TinyMCE editor control instance. This function also handles some non instance specific commands like mceAddControl, mceRemoveControl, mceHelp or mceFocus.</div><div class="params"><h4>Parameters</h4><div class="param">command - Command name to execute, for example mceLink or Bold.</div><div class="param">user_interface - True/false state if a UI (dialog) should be presented or not.</div><div class="param">value - Optional command value, this can be anything.</div></div></div><hr><h4><a name="execCommandCallback">execCommandCallback</a></h4><div class="layout"> execCommandCallback(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	i, &lt;string&gt;	p, &lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Executes the specified execcommand callback on all options, plugins and themes. This will chain them, so callback chain will be broken if one function returns true.</div><div class="params"><h4>Parameters</h4><div class="param">i - TinyMCE editor control instance to execute callback on.</div><div class="param">p - TinyMCE callback parameter to execute.</div><div class="param">n - Function name to execute.</div></div><h4>Returns</h4><div class="longsummary return">true/false if a callback was executed.</div></div><hr><h4><a name="execInstanceCommand">execInstanceCommand</a></h4><div class="layout">void execInstanceCommand(&lt;string&gt;	editor_id, &lt;string&gt;	command, &lt;boolean&gt;	user_interface, &lt;object&gt;	value, &lt;boolean&gt;	focus)
		</div><div class="detail"><div class="longsummary">Executes a command on a specific editor instance by id.</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - TinyMCE editor control instance id to perform comman on.</div><div class="param">command - Command name to execute, for example mceLink or Bold.</div><div class="param">user_interface - True/false state if a UI (dialog) should be presented or not.</div><div class="param">value - Optional command value, this can be anything.</div><div class="param">focus - True/false if the editor instance should be focused first.</div></div></div><hr><h4><a name="executeCallback">executeCallback</a></h4><div class="layout"> executeCallback(&lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	i, &lt;string&gt;	p, &lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Executes the specified callback on all options, plugins and themes. This will chain them, so callback chain will be broken if one function returns false.</div><div class="params"><h4>Parameters</h4><div class="param">i - TinyMCE editor control instance to execute callback on.</div><div class="param">p - TinyMCE callback parameter to execute.</div><div class="param">n - Function name to execute.</div></div><h4>Returns</h4><div class="longsummary return">true/false if a callback was executed.</div></div><hr><h4><a name="explode">explode</a></h4><div class="layout">Array explode(&lt;string&gt;	d, &lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">Splits a string by the specified delimiter and skips any empty items.</div><div class="params"><h4>Parameters</h4><div class="param">d - Delimiter to split by.</div><div class="param">s - String to split.</div></div><h4>Returns</h4><div class="longsummary return">Array with chunks from string.</div></div><hr><h4><a name="extend">extend</a></h4><div class="layout">Object extend(&lt;Object&gt;	p, &lt;Object&gt;	np)
		</div><div class="detail"><div class="longsummary">Extends the specified prototype with new methods.</div><div class="params"><h4>Parameters</h4><div class="param">p - Prototype to extend with new methods.</div><div class="param">np - New prototype to extend the other one with.</div></div><h4>Returns</h4><div class="longsummary return">Extended prototype array.</div></div><hr><h4><a name="fixGeckoBaseHREFBug">fixGeckoBaseHREFBug</a></h4><div class="layout">string fixGeckoBaseHREFBug(&lt;boolean&gt;	m, &lt;HTMLElement&gt;	e, &lt;string&gt;	h)
		</div><div class="detail"><div class="longsummary">Fixes a Gecko specific bug where href, src attribute values gets converted incorrectly when inserted into editor. This function will replace all src, href with mce_tsrc and mce_thref to keep the values from chaging when they get inserted.</div><div class="params"><h4>Parameters</h4><div class="param">m - Mode state, true is to replace the src, href attributes to mce_tsrc and mce_thref.</div><div class="param">e - HTML element to replace them in. (Will be used if m is 0)</div><div class="param">h - HTML code to replace them in. (Will be used if m is 1)</div></div><h4>Returns</h4><div class="longsummary return">Converted string or the specified HTML value depending on mode.</div></div><hr><h4><a name="getAbsPosition">getAbsPosition</a></h4><div class="layout">TinyMCE_ElementPosition getAbsPosition(&lt;HTMLNode&gt;	n, &lt;HTMLNode&gt;	cn)
		</div><div class="detail"><div class="longsummary">Returns the absolute x, y position of a node. The position will be returned in a object with two properties absLeft and absTop.</div><div class="params"><h4>Parameters</h4><div class="param">n - HTML element to get x, y position from.</div><div class="param">cn - Optional HTML element to to stop position calcualtion by.</div></div><h4>Returns</h4><div class="longsummary return">Absolute position of the specified element.</div></div><hr><h4><a name="getAttrib">getAttrib</a></h4><div class="layout">string getAttrib(&lt;HTMLElement&gt;	elm, &lt;string&gt;	name, &lt;string&gt;	dv)
		</div><div class="detail"><div class="longsummary">Returns the attribute value of a element or the default value if it wasn't found.</div><div class="params"><h4>Parameters</h4><div class="param">elm - HTML element to get attribute from.</div><div class="param">name - Attribute name to retrive.</div><div class="param">dv - Optional default value to return, this value defaults to a empty string.</div></div><h4>Returns</h4><div class="longsummary return">Attribute value or default value if it wasn't found in element.</div></div><hr><h4><a name="getButtonHTML">getButtonHTML</a></h4><div class="layout">string getButtonHTML(&lt;string&gt;	id, &lt;string&gt;	lang, &lt;string&gt;	img, &lt;string&gt;	cmd, &lt;string&gt;	ui, &lt;string&gt;	val)
		</div><div class="detail"><div class="longsummary">Returns the HTML code for a normal button control.</div><div class="params"><h4>Parameters</h4><div class="param">id - Button control id, this will be the suffix for the element id, the prefix is the editor id.</div><div class="param">lang - Language variable key name to insert as the title/alt of the button image.</div><div class="param">img - Image URL to insert, {$themeurl} and {$pluginurl} will be replaced.</div><div class="param">cmd - Command to execute when the user clicks the button.</div><div class="param">ui - Optional user interface boolean for command.</div><div class="param">val - Optional value for command.</div></div><h4>Returns</h4><div class="longsummary return">HTML code for a normal button based in input information.</div></div><hr><h4><a name="getContent">getContent</a></h4><div class="layout">string getContent(&lt;string&gt;	editor_id)
		</div><div class="detail"><div class="longsummary">Returns the HTML contents of the specified editor instance id.</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - Editor instance id to retrive HTML code from.</div></div><h4>Returns</h4><div class="longsummary return">HTML contents of editor id or null if it wasn't found.</div></div><hr><h4><a name="getControlHTML">getControlHTML</a></h4><div class="layout">string getControlHTML(&lt;string&gt;	c)
		</div><div class="detail"><div class="longsummary">Returns the HTML for the specified control this will loop through the theme and all plugins inorder to find the control. The callback for each theme and plugin is called getControlHTML.</div><div class="params"><h4>Parameters</h4><div class="param">c - Control name/id to get HTML code for.</div></div><h4>Returns</h4><div class="longsummary return">HTML code for the specified control or empty string if it wasn't found.</div></div><hr><h4><a name="getCSSClasses">getCSSClasses</a></h4><div class="layout">Array getCSSClasses(&lt;string&gt;	editor_id, &lt;DOMDocument&gt;	doc)
		</div><div class="detail"><div class="longsummary">Returns a array of CSS classes that is available in a document. Todo: Fix this one, it's so ugly. :)</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - Editor id to get CSS classes from.</div><div class="param">doc - DOM document to get the CSS classes from.</div></div><h4>Returns</h4><div class="longsummary return">Array of CSS classes that is available in a document.</div></div><hr><h4><a name="getEditorId">getEditorId</a></h4><div class="layout">string getEditorId(&lt;string&gt;	form_element)
		</div><div class="detail"><div class="longsummary">Returns the editor instance id of a specific form element.</div><div class="params"><h4>Parameters</h4><div class="param">form_element - Form element name to get instance id for.</div></div><h4>Returns</h4><div class="longsummary return">TinyMCE editor instance id or null if it wasn't found.</div></div><hr><h4><a name="getElementByAttributeValue">getElementByAttributeValue</a></h4><div class="layout">HTMLElement getElementByAttributeValue(&lt;HTMLElement&gt;	n, &lt;string&gt;	e, &lt;string&gt;	a, &lt;string&gt;	v)
		</div><div class="detail"><div class="longsummary">Returns a element by a specific attribute and it's value.</div><div class="params"><h4>Parameters</h4><div class="param">n - Element to search in.</div><div class="param">e - Element name to search for.</div><div class="param">a - Attribute name to search for.</div><div class="param">v - Attribute value to search for.</div></div><h4>Returns</h4><div class="longsummary return">HTML element that matched the criterias or null on failure.</div></div><hr><h4><a name="getElementsByAttributeValue">getElementsByAttributeValue</a></h4><div class="layout">Array getElementsByAttributeValue(&lt;HTMLElement&gt;	n, &lt;string&gt;	e, &lt;string&gt;	a, &lt;string&gt;	v)
		</div><div class="detail"><div class="longsummary">Returns a element array by a specific attribute and it's value.</div><div class="params"><h4>Parameters</h4><div class="param">n - Element to search in.</div><div class="param">e - Element name to search for.</div><div class="param">a - Attribute name to search for.</div><div class="param">v - Attribute value to search for.</div></div><h4>Returns</h4><div class="longsummary return">HTML element array that matched the criterias or null on failure.</div></div><hr><h4><a name="getInstanceById">getInstanceById</a></h4><div class="layout">TinyMCE_Control getInstanceById(&lt;string&gt;	editor_id)
		</div><div class="detail"><div class="longsummary">Returns a TinyMCE editor instance by the specified editor id or null if it wasn't found.</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - Editor id to get instance for.</div></div><h4>Returns</h4><div class="longsummary return">TinyMCE editor control instance or null if it wasn't found.</div></div><hr><h4><a name="getLang">getLang</a></h4><div class="layout">object getLang(&lt;string&gt;	name, &lt;string&gt;	default_value, &lt;boolean&gt;	parse_entities, &lt;Array&gt;	va)
		</div><div class="detail"><div class="longsummary">Returns a language variable value from the language packs.</div><div class="params"><h4>Parameters</h4><div class="param">name - Name of the key to retrive.</div><div class="param">default_value - Optional default value to return if it wasn't found.</div><div class="param">parse_entities - Is HTML entities to be resolved or not.</div><div class="param">va - Optional name/value array of variables to replace in language string.</div></div><h4>Returns</h4><div class="longsummary return">Language string value could be a number if it's a relative dimenstion.</div></div><hr><h4><a name="getMenuButtonHTML">getMenuButtonHTML</a></h4><div class="layout">string getMenuButtonHTML(&lt;string&gt;	id, &lt;string&gt;	lang, &lt;string&gt;	img, &lt;string&gt;	mcmd, &lt;string&gt;	cmd, &lt;string&gt;	ui, &lt;string&gt;	val)
		</div><div class="detail"><div class="longsummary">Returns the HTML code for a normal button control.</div><div class="params"><h4>Parameters</h4><div class="param">id - Button control id, this will be the suffix for the element id, the prefix is the editor id.</div><div class="param">lang - Language variable key name to insert as the title/alt of the button image.</div><div class="param">img - Image URL to insert, {$themeurl} and {$pluginurl} will be replaced.</div><div class="param">mcmd - Command to execute when the user clicks the menu arrow button.</div><div class="param">cmd - Command to execute when the user clicks the main button.</div><div class="param">ui - Optional user interface boolean for command.</div><div class="param">val - Optional value for command.</div></div><h4>Returns</h4><div class="longsummary return">HTML code for a normal button based in input information.</div></div><hr><h4><a name="getNodeTree">getNodeTree</a></h4><div class="layout">Array getNodeTree(&lt;HTMLNode&gt;	n, &lt;Array&gt;	na, &lt;int&gt;	t, &lt;string&gt;	nn)
		</div><div class="detail"><div class="longsummary">Returns a array of nodes selected retrived from the child nodes of the specified node.</div><div class="params"><h4>Parameters</h4><div class="param">n - Node to get children from.</div><div class="param">na - Array to fill with children.</div><div class="param">t - Node type to get.</div><div class="param">nn - Node name of items to retrive.</div></div><h4>Returns</h4><div class="longsummary return">Node array.</div></div><hr><h4><a name="getOuterHTML">getOuterHTML</a></h4><div class="layout">string getOuterHTML(&lt;HTMLElement&gt;	e)
		</div><div class="detail"><div class="longsummary">Returns the outer HTML of a element, this uses the outerHTML property in MSIE and Opera and a workaround for Gecko.</div><div class="params"><h4>Parameters</h4><div class="param">e - HTML element to get outerHTML from.</div></div><h4>Returns</h4><div class="longsummary return">HTML content string.</div></div><hr><h4><a name="getParam">getParam</a></h4><div class="layout">object getParam(&lt;string&gt;	name, &lt;string&gt;	default_value, &lt;boolean&gt;	strip_whitespace, &lt;string&gt;	split_chr)
		</div><div class="detail"><div class="longsummary">Returns a specific configuration setting or the default value if it wasn't found.</div><div class="params"><h4>Parameters</h4><div class="param">name - Configuration setting to get.</div><div class="param">default_value - Default value to return if it wasn't found.</div><div class="param">strip_whitespace - Optional remove all whitespace.</div><div class="param">split_chr - Split char/regex/string.</div></div><h4>Returns</h4><div class="longsummary return">Number, string or other object based in parameter and default_value.</div></div><hr><h4><a name="getParentBlockElement">getParentBlockElement</a></h4><div class="layout">HTMLElement getParentBlockElement(&lt;HTMLNode&gt;	n, &lt;HTMLNode&gt;	r)
		</div><div class="detail"><div class="longsummary">Returns the first block element parent of the specified node.</div><div class="params"><h4>Parameters</h4><div class="param">n - Node get parent block element for.</div><div class="param">r - Optional root element, never go below this point.</div></div><h4>Returns</h4><div class="longsummary return">First block element parent of the specified node or null if it wasn't found.</div></div><hr><h4><a name="getParentElement">getParentElement</a></h4><div class="layout">HTMLElement getParentElement(&lt;HTMLNode&gt;	node, &lt;string&gt;	na, &lt;function&gt;	f, &lt;HTMLNode&gt;	r)
		</div><div class="detail"><div class="longsummary">Returns the parent element of the specified node based on the search criteria.</div><div class="params"><h4>Parameters</h4><div class="param">node - Node to get parent element of.</div><div class="param">na - Comma separated list of element names to get.</div><div class="param">f - Optional function to call for each node, if it returns true the node is valid.</div><div class="param">r - Optional root element, never go below this point.</div></div><h4>Returns</h4><div class="longsummary return">HTMLElement or null based on search criteras.</div></div><hr><h4><a name="getParentNode">getParentNode</a></h4><div class="layout">DOMNode getParentNode(&lt;DOMNode&gt;	n, &lt;function&gt;	f, &lt;HTMLNode&gt;	r)
		</div><div class="detail"><div class="longsummary">Returns a node by the specified selector function. This function will loop through all parent nodes and call the specified function for each node. If the function then returns true it will stop the execution and return that node.</div><div class="params"><h4>Parameters</h4><div class="param">n - HTML node to search parents on.</div><div class="param">f - Selection function to execute on each node.</div><div class="param">r - Optional root element, never go below this point.</div></div><h4>Returns</h4><div class="longsummary return">DOMNode or null if it wasn't found.</div></div><hr><h4><a name="getViewPort">getViewPort</a></h4><div class="layout">Object getViewPort(&lt;Window&gt;	w)
		</div><div class="detail"><div class="longsummary">Returns the viewport of the specificed window instance.</div><div class="params"><h4>Parameters</h4><div class="param">w - Window to get viewport of.</div></div><h4>Returns</h4><div class="longsummary return">Viewport object with fields top, left, width and height.</div></div><hr><h4><a name="getWindowArg">getWindowArg</a></h4><div class="layout"> getWindowArg(&lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Returns the window argument to be passed to TinyMCE popup. Use: tinyMCEPopup.getWindowArg instead.</div><div class="params"><h4>Parameters</h4><div class="param">n - Window argument name.</div></div><h4>Returns</h4><div class="longsummary return">Argument value or default value if it wasn't found.</div></div><hr><h4><a name="getVisualAidClass">getVisualAidClass</a></h4><div class="layout">string getVisualAidClass(&lt;string&gt;	class_name, &lt;boolean&gt;	state)
		</div><div class="detail"><div class="longsummary">Returns the visual aid class string, this will add/remove the visual aid class.</div><div class="params"><h4>Parameters</h4><div class="param">class_name - Class name value to add/remove visual aid classes from.</div><div class="param">state - true/false if the classes should be added or removed.</div></div><h4>Returns</h4><div class="longsummary return">New class value containing the visual aid classes or not.</div></div><hr><h4><a name="handleEvent">handleEvent</a></h4><div class="layout">boolean handleEvent(&lt;DOMEvent&gt;	e)
		</div><div class="detail"><div class="longsummary">Event handler function that gets executed each time a event occurs in a TinyMCE editor control instance. Todo: Fix the return statements so they return true or false.</div><div class="params"><h4>Parameters</h4><div class="param">e - DOM event object reference.</div></div><h4>Returns</h4><div class="longsummary return">true - if the event is to be chained, false - if the event chain is to be canceled.</div></div><hr><h4><a name="handleVisualAid">handleVisualAid</a></h4><div class="layout">void handleVisualAid(&lt;HTMLElement&gt;	el, &lt;boolean&gt;	deep, &lt;boolean&gt;	state, &lt;<a href="class_TinyMCE_Control.htm">TinyMCE_Control</a>&gt;	inst)
		</div><div class="detail"><div class="longsummary">Adds visual aid classes to all elements that need them recursive in the DOM tree.</div><div class="params"><h4>Parameters</h4><div class="param">el - HTML element to add visual aid classes to.</div><div class="param">deep - Should they be added to all children aswell.</div><div class="param">state - Should they be added or removed.</div><div class="param">inst - TinyMCE editor control instance to add/remove them to/from.</div></div></div><hr><h4><a name="hasCSSClass">hasCSSClass</a></h4><div class="layout">bool hasCSSClass(&lt;HTMLElement&gt;	n)
		</div><div class="detail"><div class="longsummary">Returns true if the specified element has the specified class.</div><div class="params"><h4>Parameters</h4><div class="param">n - HTML element to check CSS class on.</div></div><h4>Returns</h4><div class="longsummary return">true/false if the specified element has the specified class.</div></div><hr><h4><a name="hasMenu">hasMenu</a></h4><div class="layout">boolean hasMenu(&lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Checks if the specified menu by name is added to TinyMCE.</div><div class="params"><h4>Parameters</h4><div class="param">n - TinyMCE menu id.</div></div><h4>Returns</h4><div class="longsummary return">true/false if it exists or not.</div></div><hr><h4><a name="hasPlugin">hasPlugin</a></h4><div class="layout">boolean hasPlugin(&lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Returns true/false if the specified plugin is loaded or not.</div><div class="params"><h4>Parameters</h4><div class="param">n - Plugin name to look for.</div></div><h4>Returns</h4><div class="longsummary return">true/false if the specified plugin is loaded or not.</div></div><hr><h4><a name="hasTheme">hasTheme</a></h4><div class="layout">boolean hasTheme(&lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Returns true/false if the specified theme is loaded or not.</div><div class="params"><h4>Parameters</h4><div class="param">n - Theme name/id to check for.</div></div><h4>Returns</h4><div class="longsummary return">true/false if the specified theme is loaded or not.</div></div><hr><h4><a name="importCSS">importCSS</a></h4><div class="layout">void importCSS(&lt;DOMDocument&gt;	doc, &lt;string&gt;	css)
		</div><div class="detail"><div class="longsummary">Imports a CSS file into a allready loaded document. This will add a link element to the head element of the document.</div><div class="params"><h4>Parameters</h4><div class="param">doc - DOM Document to load CSS into.</div><div class="param">css - CSS File URL to load or comma separated list of files.</div></div></div><hr><h4><a name="importPluginLanguagePack">importPluginLanguagePack</a></h4><div class="layout">void importPluginLanguagePack(&lt;string&gt;	name)
		</div><div class="detail"><div class="longsummary">Loads a plugin specific language pack.</div><div class="params"><h4>Parameters</h4><div class="param">name - Plugin name/id to load language pack for.</div></div></div><hr><h4><a name="importThemeLanguagePack">importThemeLanguagePack</a></h4><div class="layout">void importThemeLanguagePack(&lt;string&gt;	name)
		</div><div class="detail"><div class="longsummary">Loads a theme specific language pack.</div><div class="params"><h4>Parameters</h4><div class="param">name - Optional name of the theme to load language pack from.</div></div></div><hr><h4><a name="init">init</a></h4><div class="layout">void init()
		</div><div class="detail"><div class="longsummary">Initializes TinyMCE with the specific configuration settings. This method may be called multiple times when multiple instances with diffrent settings is to be created.</div></div><hr><h4><a name="insertAfter">insertAfter</a></h4><div class="layout">void insertAfter(&lt;HTMLNode&gt;	n, &lt;HTMLNode&gt;	r)
		</div><div class="detail"><div class="longsummary">Inserts a node after the specific node.</div><div class="params"><h4>Parameters</h4><div class="param">n - New node to insert.</div><div class="param">r - Reference node to insert after.</div></div></div><hr><h4><a name="isBlockElement">isBlockElement</a></h4><div class="layout">boolean isBlockElement(&lt;HTMLNode&gt;	n)
		</div><div class="detail"><div class="longsummary">Returns true/false if the specified node is a block element or not.</div><div class="params"><h4>Parameters</h4><div class="param">n - Node to verify.</div></div><h4>Returns</h4><div class="longsummary return">true/false if the specified node is a block element or not.</div></div><hr><h4><a name="isInstance">isInstance</a></h4><div class="layout">boolean isInstance(&lt;object&gt;	o)
		</div><div class="detail"><div class="longsummary">Returns true/false if a specific object is a TinyMCE_Control instance or not.</div><div class="params"><h4>Parameters</h4><div class="param">o - Object to check.</div></div><h4>Returns</h4><div class="longsummary return">true/false if it's a control or not.</div></div><hr><h4><a name="loadCSS">loadCSS</a></h4><div class="layout">void loadCSS(&lt;string&gt;	url)
		</div><div class="detail"><div class="longsummary">Loads the specified CSS by writing the a link tag to the current page. This will also check if the file has been loaded before. This function should only be used when the page is loading.</div><div class="params"><h4>Parameters</h4><div class="param">url - CSS file URL to load or comma separated list of files.</div></div></div><hr><h4><a name="loadNextScript">loadNextScript</a></h4><div class="layout">void loadNextScript()
		</div><div class="detail"><div class="longsummary">Loads the next script in chain.</div></div><hr><h4><a name="loadPlugin">loadPlugin</a></h4><div class="layout">void loadPlugin(&lt;string&gt;	n, &lt;string&gt;	u)
		</div><div class="detail"><div class="longsummary">Load plugin from external URL.</div><div class="params"><h4>Parameters</h4><div class="param">n - Plugin name for example \"emotions\".</div><div class="param">u - URL of plugin directory to load.</div></div></div><hr><h4><a name="loadScript">loadScript</a></h4><div class="layout">void loadScript(&lt;string&gt;	url)
		</div><div class="detail"><div class="longsummary">Loads the specified script by writing the a script tag to the current page. This will also check if the file has been loaded before. This function should only be used when the page is loading.</div><div class="params"><h4>Parameters</h4><div class="param">url - Script URL to load.</div></div></div><hr><h4><a name="nextNode">nextNode</a></h4><div class="layout">HTMLElement nextNode(&lt;HTMLNode&gt;	e, &lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Finds any element after the current one by name. This will loop through the siblings inorder to find the specified element by name. If the element wasn't found it will return a null value.</div><div class="params"><h4>Parameters</h4><div class="param">e - HTML node to search from.</div><div class="param">n - Comma separated list of element names to search for.</div></div><h4>Returns</h4><div class="longsummary return">HTML Element or null if it wasn't found.</div></div><hr><h4><a name="onLoad">onLoad</a></h4><div class="layout">boolean onLoad()
		</div><div class="detail"><div class="longsummary">Gets executed when the page loads or get intitialized. This function will then convert all textareas/divs that is to be converted into TinyMCE editor controls.</div><h4>Returns</h4><div class="longsummary return">true - if the event is to be chained, false - if the event chain is to be canceled.</div></div><hr><h4><a name="onMouseMove">onMouseMove</a></h4><div class="layout">void onMouseMove()
		</div><div class="detail"><div class="longsummary">Mouse move handler function, this will be executed each time the mouse is moved within a editor instance. This function stores away the current selection in MSIE this will then be used when a undo/redo level is added.</div></div><hr><h4><a name="openWindow">openWindow</a></h4><div class="layout">void openWindow(&lt;Array&gt;	template, &lt;Array&gt;	args)
		</div><div class="detail"><div class="longsummary">Opens a popup window based in the specified input data. This function is used for all popup windows in TinyMCE. These are the current template keys: file, width, height, close_previous.</div><div class="params"><h4>Parameters</h4><div class="param">template - Popup template data such as with, height etc.</div><div class="param">args - Popup arguments that is to be passed to the popup such as custom data.</div></div></div><hr><h4><a name="parseStyle">parseStyle</a></h4><div class="layout">Array parseStyle(&lt;string&gt;	str)
		</div><div class="detail"><div class="longsummary">Parses the specified HTML style data. This will parse for example "border-left: 1px; background-color: red" into an key/value array.</div><div class="params"><h4>Parameters</h4><div class="param">str - Style data to parse.</div></div><h4>Returns</h4><div class="longsummary return">Name/Value array of style items.</div></div><hr><h4><a name="parseURL">parseURL</a></h4><div class="layout">TinyMCE_URL_Item parseURL(&lt;string&gt;	url_str)
		</div><div class="detail"><div class="longsummary">Parses a URL in to its diffrent components.</div><div class="params"><h4>Parameters</h4><div class="param">url_str - URL string to parse into a URL object.</div></div><h4>Returns</h4><div class="longsummary return">URL object based on input string.</div></div><hr><h4><a name="prevNode">prevNode</a></h4><div class="layout">HTMLElement prevNode(&lt;HTMLNode&gt;	e, &lt;string&gt;	n)
		</div><div class="detail"><div class="longsummary">Finds any previous element by name. This will loop through the siblings inorder to find the specified element by name. If the element wasn't found it will return a null value.</div><div class="params"><h4>Parameters</h4><div class="param">e - HTML node to search from.</div><div class="param">n - Comma separated list of element names to search for.</div></div><h4>Returns</h4><div class="longsummary return">HTML Element or null if it wasn't found.</div></div><hr><h4><a name="queryInstanceCommandState">queryInstanceCommandState</a></h4><div class="layout">boolean queryInstanceCommandState(&lt;string&gt;	editor_id, &lt;string&gt;	command)
		</div><div class="detail"><div class="longsummary">Queries a command state for a specific command on a specific editor instance.</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - Editor id to query command state on.</div><div class="param">command - Command to query for.</div></div><h4>Returns</h4><div class="longsummary return">Command state passed from browser.</div></div><hr><h4><a name="queryInstanceCommandValue">queryInstanceCommandValue</a></h4><div class="layout">object queryInstanceCommandValue(&lt;string&gt;	editor_id, &lt;string&gt;	command)
		</div><div class="detail"><div class="longsummary">Queries a command value for a specific command on a specific editor instance.</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - Editor id to query command value on.</div><div class="param">command - Command to query for.</div></div><h4>Returns</h4><div class="longsummary return">Command value passed from browser.</div></div><hr><h4><a name="regexpReplace">regexpReplace</a></h4><div class="layout">string regexpReplace(&lt;string&gt;	in_str, &lt;string&gt;	reg_exp, &lt;string&gt;	replace_str, &lt;string&gt;	in_str)
		</div><div class="detail"><div class="longsummary">Regexp replaces the contents of a string. Use normal replace instead.</div><div class="params"><h4>Parameters</h4><div class="param">in_str - String to replace in.</div><div class="param">reg_exp - Regexp to replace.</div><div class="param">replace_str - String to replace with.</div><div class="param">in_str - Optional regexp options like "gi".</div></div><h4>Returns</h4><div class="longsummary return">Replaced string value.</div></div><hr><h4><a name="removeCSSClass">removeCSSClass</a></h4><div class="layout">string removeCSSClass(&lt;HTMLElement&gt;	e)
		</div><div class="detail"><div class="longsummary">Removes the specified CSS class from the element.</div><div class="params"><h4>Parameters</h4><div class="param">e - HTML element to remove CSS class to.</div></div><h4>Returns</h4><div class="longsummary return">Returns the new class attribute value.</div></div><hr><h4><a name="removeEvent">removeEvent</a></h4><div class="layout">void removeEvent(&lt;HTMLElement&gt;	o, &lt;string&gt;	n, &lt;function&gt;	h)
		</div><div class="detail"><div class="longsummary">Removes a event handler function from the specified object.</div><div class="params"><h4>Parameters</h4><div class="param">o - Object to remove event handler from.</div><div class="param">n - Event name to stop listening for. Example "click".</div><div class="param">h - Function handler to detach from the event.</div></div></div><hr><h4><a name="removeInstance">removeInstance</a></h4><div class="layout">MCEControl removeInstance(&lt;MCEControl&gt;	ti)
		</div><div class="detail"><div class="longsummary">Removes the specified instance from TinyMCE Engine.</div><div class="params"><h4>Parameters</h4><div class="param">ti - Target instance to remove from TinyMCE.</div></div><h4>Returns</h4><div class="longsummary return">Removed MCEControl instance.</div></div><hr><h4><a name="removeMCEControl">removeMCEControl</a></h4><div class="layout">void removeMCEControl(&lt;string&gt;	editor_id)
		</div><div class="detail"><div class="longsummary">Removes a TinyMCE editor control instance by id.</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - Id of editor instance to remove.</div></div></div><hr><h4><a name="removeTinyMCEFormElements">removeTinyMCEFormElements</a></h4><div class="layout">void removeTinyMCEFormElements(&lt;HTMLElement&gt;	form_obj)
		</div><div class="detail"><div class="longsummary">Removes/disables TinyMCE built in form elements such as select boxes for font sizes etc. These are disabled when the user submits a form so they don't get picked up by the backend script that intercepts the contents.</div><div class="params"><h4>Parameters</h4><div class="param">form_obj - Form object to loop through for TinyMCE specific form elements.</div></div></div><hr><h4><a name="renameElement">renameElement</a></h4><div class="layout">void renameElement(&lt;HTMLElement&gt;	e, &lt;string&gt;	n, &lt;DOMDocument&gt;	d)
		</div><div class="detail"><div class="longsummary">Renames the specified element to the specified name.</div><div class="params"><h4>Parameters</h4><div class="param">e - Element to rename.</div><div class="param">n - New name of the element.</div><div class="param">d - Optional document reference.</div></div></div><hr><h4><a name="replaceVar">replaceVar</a></h4><div class="layout">string replaceVar(&lt;string&gt;	h, &lt;string&gt;	r, &lt;string&gt;	v)
		</div><div class="detail"><div class="longsummary">Replaces a specific variable in the string with a nother string.</div><div class="params"><h4>Parameters</h4><div class="param">h - String to search in for the variable.</div><div class="param">r - Variable name to search for.</div><div class="param">v - Value to insert where a variable is found.</div></div><h4>Returns</h4><div class="longsummary return">String with replaced variable.</div></div><hr><h4><a name="resetForm">resetForm</a></h4><div class="layout">void resetForm(&lt;int&gt;	form_index)
		</div><div class="detail"><div class="longsummary">Resets a forms TinyMCE instances based on form index.</div><div class="params"><h4>Parameters</h4><div class="param">form_index - Form index to reset.</div></div></div><hr><h4><a name="selectElements">selectElements</a></h4><div class="layout">Array selectElements(&lt;DOMNode&gt;	n, &lt;string&gt;	na, &lt;function&gt;	f)
		</div><div class="detail"><div class="longsummary">Returns a array of elements when the specified function matches a node.</div><div class="params"><h4>Parameters</h4><div class="param">n - Node to select children from.</div><div class="param">na - Element name(s) to search for separated by commas.</div><div class="param">f - Function that returns true/false if the node is to be added or not.</div></div><h4>Returns</h4><div class="longsummary return">Array with selected elements.</div></div><hr><h4><a name="selectNodes">selectNodes</a></h4><div class="layout">Array selectNodes(&lt;DOMNode&gt;	n, &lt;function&gt;	f, &lt;Array&gt;	a)
		</div><div class="detail"><div class="longsummary">Returns a array of nodes when the specified function matches a node.</div><div class="params"><h4>Parameters</h4><div class="param">n - Node to select children from.</div><div class="param">f - Function that returns true/false if the node is to be added or not.</div><div class="param">a - Optional array to fill with nodes.</div></div><h4>Returns</h4><div class="longsummary return">Array with selected nodes.</div></div><hr><h4><a name="serializeStyle">serializeStyle</a></h4><div class="layout">string serializeStyle(&lt;Array&gt;	ar)
		</div><div class="detail"><div class="longsummary">Serializes the specified style item name/value array into a HTML string. This function will force HEX colors in Firefox and convert the URL items of a style correctly.</div><div class="params"><h4>Parameters</h4><div class="param">ar - Name/Value array of items to serialize.</div></div><h4>Returns</h4><div class="longsummary return">Serialized HTML string containing the items.</div></div><hr><h4><a name="serializeURL">serializeURL</a></h4><div class="layout">string serializeURL(&lt;TinyMCE_URL_Item&gt;	up)
		</div><div class="detail"><div class="longsummary">Serializes the specified URL object into a string.</div><div class="params"><h4>Parameters</h4><div class="param">up - URL object to serialize.</div></div><h4>Returns</h4><div class="longsummary return">Serialized URL object.</div></div><hr><h4><a name="setAttrib">setAttrib</a></h4><div class="layout">void setAttrib(&lt;HTMLElement&gt;	el, &lt;string&gt;	name, &lt;string&gt;	va, &lt;boolean&gt;	fix)
		</div><div class="detail"><div class="longsummary">Sets the attribute value for a specific attribute.</div><div class="params"><h4>Parameters</h4><div class="param">el - HTML element to set attribute on.</div><div class="param">name - Attribute name to set.</div><div class="param">va - Attribute value to set.</div><div class="param">fix - Optional fix value state, if true only number data will be accepted.</div></div></div><hr><h4><a name="setContent">setContent</a></h4><div class="layout">void setContent(&lt;string&gt;	h)
		</div><div class="detail"><div class="longsummary">Sets the HTML contents of the selected editor instance.</div><div class="params"><h4>Parameters</h4><div class="param">h - HTML contents to set in the selected instance.</div></div></div><hr><h4><a name="setEventHandlers">setEventHandlers</a></h4><div class="layout">void setEventHandlers(&lt;bool&gt;	s)
		</div><div class="detail"><div class="longsummary">Sets or removes event handles form the specified instance.</div><div class="params"><h4>Parameters</h4><div class="param">s - True/false state if to add or remove event handlers.</div></div></div><hr><h4><a name="setInnerHTML">setInnerHTML</a></h4><div class="layout">void setInnerHTML(&lt;HTMLElement&gt;	e, &lt;string&gt;	h)
		</div><div class="detail"><div class="longsummary">Sets the innerHTML property of a element, this function also fixes a MSIE bug where the first comment is removed.</div><div class="params"><h4>Parameters</h4><div class="param">e - Element to insert HTML in.</div><div class="param">h - HTML code to insert into innerHTML.</div></div></div><hr><h4><a name="setOuterHTML">setOuterHTML</a></h4><div class="layout">void setOuterHTML(&lt;HTMLElement&gt;	e, &lt;string&gt;	h, &lt;DOMDocument&gt;	d)
		</div><div class="detail"><div class="longsummary">Sets the outer HTML of a element, this uses the outerHTML property in MSIE and Opera and a workaround for Gecko.</div><div class="params"><h4>Parameters</h4><div class="param">e - HTML element to set outerHTML on.</div><div class="param">h - HTML string to set in property.</div><div class="param">d - Optional document instance (Required in old IE versions).</div></div></div><hr><h4><a name="setPluginBaseURL">setPluginBaseURL</a></h4><div class="layout">void setPluginBaseURL(&lt;string&gt;	n, &lt;string&gt;	u)
		</div><div class="detail"><div class="longsummary">Sets the baseURL of the specified plugin, this is useful if the plugin is loaded from a external location.</div><div class="params"><h4>Parameters</h4><div class="param">n - Plugin name/id to set base URL on. This have to be added before.</div><div class="param">u - Base URL of plugin, this string should be the URL prefix for the plugin without a trailing slash.</div></div></div><hr><h4><a name="setStyleAttrib">setStyleAttrib</a></h4><div class="layout">void setStyleAttrib(&lt;HTMLElement&gt;	e, &lt;string&gt;	n, &lt;string&gt;	v)
		</div><div class="detail"><div class="longsummary">Sets a style attribute item value.</div><div class="params"><h4>Parameters</h4><div class="param">e - HTML element to set style attribute item on.</div><div class="param">n - Style item name to set.</div><div class="param">v - Style item value to set.</div></div></div><hr><h4><a name="setupContent">setupContent</a></h4><div class="layout">void setupContent(&lt;string&gt;	editor_id)
		</div><div class="detail"><div class="longsummary">Setups the contents of TinyMCE editor instance and fills it with contents.</div><div class="params"><h4>Parameters</h4><div class="param">editor_id - TinyMCE editor instance control id to fill.</div></div></div><hr><h4><a name="setWindowArg">setWindowArg</a></h4><div class="layout">void setWindowArg(&lt;string&gt;	n, &lt;string&gt;	v)
		</div><div class="detail"><div class="longsummary">Sets the window argument to be passed to TinyMCE popup.</div><div class="params"><h4>Parameters</h4><div class="param">n - Window argument name.</div><div class="param">v - Window argument value.</div></div></div><hr><h4><a name="storeAwayURLs">storeAwayURLs</a></h4><div class="layout">string storeAwayURLs(&lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">Stores away the src and href attribute values in separate mce_src and mce_href attributes. This is needed since both MSIE and Gecko messes with these attributes. The old src and href will be intact, this simply adds them to a separate attribute.</div><div class="params"><h4>Parameters</h4><div class="param">s - HTML string to replace src and href attributes in.</div></div><h4>Returns</h4><div class="longsummary return">HTML string with replaced src and href attributes.</div></div><hr><h4><a name="submitPatch">submitPatch</a></h4><div class="layout">void submitPatch()
		</div><div class="detail"><div class="longsummary">Piggyback onsubmit event handler function, this will remove/hide the TinyMCE specific form elements call triggerSave to fill the textarea with the correct contents then call the old piggy backed event handler.</div></div><hr><h4><a name="switchClass">switchClass</a></h4><div class="layout">void switchClass(&lt;HTMLElement&gt;	ei, &lt;string&gt;	c)
		</div><div class="detail"><div class="longsummary">Switches the CSS class of the specified element. This method also caches the elements in a lookup table for performance. This should only be used for TinyMCE main UI controls like buttons or select elements.</div><div class="params"><h4>Parameters</h4><div class="param">ei - Element to set CSS class on.</div><div class="param">c - CSS class to set.</div></div></div><hr><h4><a name="triggerNodeChange">triggerNodeChange</a></h4><div class="layout">void triggerNodeChange(&lt;boolean&gt;	focus, &lt;boolean&gt;	setup_content)
		</div><div class="detail"><div class="longsummary">Triggers a nodeChange event to every theme and plugin. This will be executed when the cursor moves or when a command that modifies the editor contents is executed.</div><div class="params"><h4>Parameters</h4><div class="param">focus - Optional state if the last selected editor instance is to be focused or not.</div><div class="param">setup_content - Optional state if it's called from setup content function or not.</div></div></div><hr><h4><a name="triggerSave">triggerSave</a></h4><div class="layout">void triggerSave(&lt;boolean&gt;	skip_cleanup, &lt;boolean&gt;	skip_callback)
		</div><div class="detail"><div class="longsummary">Moves the contents from a TinyMCE editor control instance to the hidden textarea that got replaced with TinyMCE. This is executed automaticly on for example form submit.</div><div class="params"><h4>Parameters</h4><div class="param">skip_cleanup - Optional Skip cleanup, simply move the contents as fast as possible.</div><div class="param">skip_callback - Optional Skip callback, don't call the save_callback function.</div></div></div><hr><h4><a name="trim">trim</a></h4><div class="layout">string trim(&lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">Removes all prefix, suffix whitespace of a string.</div><div class="params"><h4>Parameters</h4><div class="param">s - String to replace whitespace in.</div></div><h4>Returns</h4><div class="longsummary return">Replaced string value.</div></div><hr><h4><a name="unloadHandler">unloadHandler</a></h4><div class="layout">void unloadHandler()
		</div><div class="detail"><div class="longsummary">Unload document event handler function. This function will be executed when the page is unloaded, this will automaticly move the current editor contents to the textarea element this enables the editor to restore it's state when the user presses the back button in the browser. This will execute the triggerSave function.</div></div><hr><h4><a name="updateContent">updateContent</a></h4><div class="layout">void updateContent(&lt;string&gt;	form_element_name)
		</div><div class="detail"><div class="longsummary">Moves the contents from the hidden textarea to the editor that gets inserted.</div><div class="params"><h4>Parameters</h4><div class="param">form_element_name - Form element name to move contents from.</div></div></div><hr><h4><a name="xmlEncode">xmlEncode</a></h4><div class="layout">string xmlEncode(&lt;string&gt;	s)
		</div><div class="detail"><div class="longsummary">Encodes the string to raw XML entities. This will only convert the most common ones. For real entity encoding use the xmlEncode method of the Cleanup class.</div><div class="params"><h4>Parameters</h4><div class="param">s - String to encode.</div></div><h4>Returns</h4><div class="longsummary return">XML Encoded string.</div></div></div></div></div></div><br style="clear: both"><div class="footer">JavaScript API documentation was generated with <a href="http://www.moxiecode.com">moxiedoc</a></div></body></html>