<html xmlns:moxie="urn:moxie"><head><META http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Class: TinyMCE_Popup</title><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link href="api_docs.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="search.js"></script></head><body><h1 class="title">TinyMCE</h1><div id="navigation"><a href="index.htm" class="indexlink">TinyMCE</a><div id="classlist"><h4>Classes</h4><ul><li><a href="class_TinyMCE_Cleanup.htm">TinyMCE_Cleanup</a></li><li><a href="class_TinyMCE_Control.htm">TinyMCE_Control</a></li><li><a href="class_TinyMCE_Engine.htm">TinyMCE_Engine</a></li><li><a href="class_TinyMCE_Layer.htm">TinyMCE_Layer</a></li><li><a href="class_TinyMCE_Menu.htm">TinyMCE_Menu</a></li><li><a href="class_TinyMCE_Popup.htm">TinyMCE_Popup</a></li><li><a href="class_TinyMCE_Selection.htm">TinyMCE_Selection</a></li><li><a href="class_TinyMCE_UndoRedo.htm">TinyMCE_UndoRedo</a></li></ul></div><div class="search"><form action="javascript:void(0);" onsubmit="return Search.exec(this.query.value,'searchresult','maincontent');"><label id="querylabel" for="query">Search:</label><input type="text" id="query" name="query" value=""></form></div></div><div id="searchresult"></div><div id="maincontent"><div id="classview"><div class="inheritagelist">Object<br><div class="baseclass"><strong>TinyMCE_Popup</strong><br></div></div><h3>Class TinyMCE_Popup</h3><div class="section"><div class="longsummary"></div></div><div class="section"><table class="constructorsummary"><caption>Constructor Summary</caption><tr><td><a href="#TinyMCE_Popup">TinyMCE_Popup</a>()
		<div class="shortsummary">Constructor for the popup class.</div></td></tr></table></div><div class="section"><table class="methodsummary"><caption>Method	Summary</caption><tr><td class="datatype">void</td><td><a href="#close">close</a>()
		<div class="shortsummary">Closes the current window.</div></td></tr><tr><td class="datatype">void</td><td><a href="#execCommand">execCommand</a>(&lt;string&gt;	command, &lt;boolean&gt;	user_interface, &lt;mixed&gt;	value)
		<div class="shortsummary">Executes the specific command on the parent instance that opened the window.</div></td></tr><tr><td class="datatype">void</td><td><a href="#executeOnLoad">executeOnLoad</a>(&lt;string&gt;	str)
		<div class="shortsummary">Executes the specified string onload.</div></td></tr><tr><td class="datatype">Object</td><td><a href="#getWindowArg">getWindowArg</a>(&lt;string&gt;	name, &lt;string&gt;	default_value)
		<div class="shortsummary">Returns a window argument, window arguments can be passed from a plugin to a window by using the tinyMCE.</div></td></tr><tr><td class="datatype">void</td><td><a href="#importClass">importClass</a>(&lt;string&gt;	c)
		<div class="shortsummary">Imports the specified class into the current popup.</div></td></tr><tr><td class="datatype">void</td><td><a href="#init">init</a>()
		<div class="shortsummary">Initializes the TinyMCE Popup class.</div></td></tr><tr><td class="datatype">void</td><td><a href="#onLoad">onLoad</a>()
		<div class="shortsummary">Gets executed when the window has finished loading it's contents.</div></td></tr><tr><td class="datatype">void</td><td><a href="#openBrowser">openBrowser</a>(&lt;string&gt;	element_id, &lt;string&gt;	type, &lt;string&gt;	option)
		<div class="shortsummary">Opens a filebrowser/imagebrowser this will set the output value from the browser as a value on the specified element.</div></td></tr><tr><td class="datatype">void</td><td><a href="#pickColor">pickColor</a>(&lt;DOMEvent&gt;	e, &lt;string&gt;	element_id)
		<div class="shortsummary">Executes a color picker on the specified element id.</div></td></tr><tr><td class="datatype">void</td><td><a href="#resizeToContent">resizeToContent</a>()
		<div class="shortsummary">Resizes the current window to the dimensions of the body.</div></td></tr><tr><td class="datatype">void</td><td><a href="#resizeToInnerSize">resizeToInnerSize</a>()
		<div class="shortsummary">Resizes the current window to it's inner body size.</div></td></tr><tr><td class="datatype">void</td><td><a href="#restoreSelection">restoreSelection</a>()
		<div class="shortsummary">Restores the selection back to the one stored after executing a command.</div></td></tr></table></div><div class="section constructor details"><h3><a name="constructor_detail">Constructor Detail</a></h3><div class="content"><h4><a name="TinyMCE_Popup">TinyMCE_Popup</a></h4><div class="layout">TinyMCE_Popup()
		</div><div class="detail"><div class="longsummary">Constructor for the popup class. This class contains base logic for popup/dialogs and sets up object references to the TinyMCE core.</div></div></div></div><div class="section method details"><h3><a name="method_detail">Method Detail</a></h3><div class="content"><h4><a name="close">close</a></h4><div class="layout">void close()
		</div><div class="detail"><div class="longsummary">Closes the current window. This should be used instead of window.close. Since this will also handle inlinepopups closing.</div></div><hr><h4><a name="execCommand">execCommand</a></h4><div class="layout">void execCommand(&lt;string&gt;	command, &lt;boolean&gt;	user_interface, &lt;mixed&gt;	value)
		</div><div class="detail"><div class="longsummary">Executes the specific command on the parent instance that opened the window. This method will also take care of the storage and restorage of the current selection in MSIE when using inlinepopups. So we suggest using this method instead of tinyMCE.execCommand when using popup windows.</div><div class="params"><h4>Parameters</h4><div class="param">command - Command name to execute, for example mceLink or Bold.</div><div class="param">user_interface - True/false state if a UI (dialog) should be presented or not.</div><div class="param">value - Optional command value, this can be anything.</div></div></div><hr><h4><a name="executeOnLoad">executeOnLoad</a></h4><div class="layout">void executeOnLoad(&lt;string&gt;	str)
		</div><div class="detail"><div class="longsummary">Executes the specified string onload. This is a workaround for Opera since it doesn't execute the events in the same order than MSIE and Firefox.</div><div class="params"><h4>Parameters</h4><div class="param">str - String to evaluate on load.</div></div></div><hr><h4><a name="getWindowArg">getWindowArg</a></h4><div class="layout">Object getWindowArg(&lt;string&gt;	name, &lt;string&gt;	default_value)
		</div><div class="detail"><div class="longsummary">Returns a window argument, window arguments can be passed from a plugin to a window by using the tinyMCE.openWindow function.</div><div class="params"><h4>Parameters</h4><div class="param">name - Argument name to retrive.</div><div class="param">default_value - Optional default value to assign if the argument wasn't set.</div></div><h4>Returns</h4><div class="longsummary return">Argument value object.</div></div><hr><h4><a name="importClass">importClass</a></h4><div class="layout">void importClass(&lt;string&gt;	c)
		</div><div class="detail"><div class="longsummary">Imports the specified class into the current popup. This will setup a local class definition by importing from the parent window.</div><div class="params"><h4>Parameters</h4><div class="param">c - Class name to import to current page.</div></div></div><hr><h4><a name="init">init</a></h4><div class="layout">void init()
		</div><div class="detail"><div class="longsummary">Initializes the TinyMCE Popup class. This will setup the TinyMCE core references and other popup/dialog related functions.</div></div><hr><h4><a name="onLoad">onLoad</a></h4><div class="layout">void onLoad()
		</div><div class="detail"><div class="longsummary">Gets executed when the window has finished loading it's contents. This function will then replace language variables with their real values.</div></div><hr><h4><a name="openBrowser">openBrowser</a></h4><div class="layout">void openBrowser(&lt;string&gt;	element_id, &lt;string&gt;	type, &lt;string&gt;	option)
		</div><div class="detail"><div class="longsummary">Opens a filebrowser/imagebrowser this will set the output value from the browser as a value on the specified element.</div><div class="params"><h4>Parameters</h4><div class="param">element_id - Id of the element to set value in.</div><div class="param">type - Type of browser to open image/file/flash.</div><div class="param">option - Option name to get the file_broswer_callback function name from.</div></div></div><hr><h4><a name="pickColor">pickColor</a></h4><div class="layout">void pickColor(&lt;DOMEvent&gt;	e, &lt;string&gt;	element_id)
		</div><div class="detail"><div class="longsummary">Executes a color picker on the specified element id. When the user then selects a color it will be set as the value of the specified element.</div><div class="params"><h4>Parameters</h4><div class="param">e - DOM event object.</div><div class="param">element_id - Element id to be filled with the color value from the picker.</div></div></div><hr><h4><a name="resizeToContent">resizeToContent</a></h4><div class="layout">void resizeToContent()
		</div><div class="detail"><div class="longsummary">Resizes the current window to the dimensions of the body.</div></div><hr><h4><a name="resizeToInnerSize">resizeToInnerSize</a></h4><div class="layout">void resizeToInnerSize()
		</div><div class="detail"><div class="longsummary">Resizes the current window to it's inner body size. This function was needed since MSIE makes the visible dialog area diffrent depending on what Theme/Skin you use.</div></div><hr><h4><a name="restoreSelection">restoreSelection</a></h4><div class="layout">void restoreSelection()
		</div><div class="detail"><div class="longsummary">Restores the selection back to the one stored after executing a command. This function was needed in MSIE when using inlinepopups, the selection would otherwice get lost if the user focused another field.</div></div></div></div></div></div><br style="clear: both"><div class="footer">JavaScript API documentation was generated with <a href="http://www.moxiecode.com">moxiedoc</a></div></body></html>